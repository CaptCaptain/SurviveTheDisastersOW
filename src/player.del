import "main.ostw";

class ObjectiveHud {
    public static String ObjectiveString = "Waiting for Players";

    public static void SetObjectiveText(String Text) {
        ObjectiveString = Text;
    }
    
    public static void CreateHUD() {
        CreateHudText(
            VisibleTo: AllPlayers(),
            Header: "",
            Subheader: "",
            Text: "|  " + ObjectiveString + "  |",
            Location: Location.Top,
            SortOrder: -1,
            HeaderColor: Color.White,
            SubheaderColor: Color.White,
            TextColor: Color.White,
            Reevaluation: HudTextRev.VisibleToAndString,
            Spectators: Spectators.DefaultVisibility
        );
        
        CreateHudText(
            VisibleTo: AllPlayers(),
            Header: "",
            Subheader: " ",
            Text: "",
            Location: Location.Top,
            SortOrder: 0,
            HeaderColor: Color.White,
            SubheaderColor: Color.White,
            TextColor: Color.White,
            Reevaluation: HudTextRev.VisibleToAndString,
            Spectators: Spectators.DefaultVisibility
        );
    }
}

class TimerHud {
    public static Number GetMinutes(Number Seconds): RoundToInteger(Seconds / 60, Rounding.Down);
    public static String GetMinutesString(Number Minutes): (GetMinutes(Minutes) < 10 ? "0%s" : "%s").Replace("%s", <String>"{0}".Format([GetMinutes(Minutes)]));
    public static Number GetSeconds(Number Seconds): RoundToInteger(Seconds % 60, Rounding.Down);
    public static String GetSecondsString(Number Seconds): (GetSeconds(Seconds) < 10 ? "0%s" : "%s").Replace("%s", <String>"{0}".Format([GetSeconds(Seconds)]));

    public static String GetTimerString(): "{0}:{1}".Format([GetMinutesString(MatchTime()), GetSecondsString(MatchTime())]);
    public static String CurrentTimerString;

    public static Color DefaultTimerColor: Color.White;
    public static Color EndingTimerColor: CustomColor(179, 19, 18, 255);
    public static Color NoTimerColor: CustomColor(255, 255, 255, 0);

    public static Color TimerColor = Color.White;

    public static void main() {
        WaitUntil(RoundToInteger(MatchTime()) != EvaluateOnce(RoundToInteger(MatchTime())), 1);

        if (MatchTime() == 0) {
            TimerColor = NoTimerColor;
        } else if (MatchTime() <= 11) {
            TimerColor = EndingTimerColor;
        } else {
            TimerColor = DefaultTimerColor;
        }

        CurrentTimerString = GetTimerString();

        Wait(0.016);

        Loop();
    }

    public static void CreateHUD() {
        CreateHudText(
            VisibleTo: AllPlayers(),
            Header: CurrentTimerString,
            Subheader: EvaluateOnce(""),
            Text: EvaluateOnce(""),
            Location: Location.Top,
            SortOrder: 1,
            HeaderColor: TimerColor,
            SubheaderColor: EvaluateOnce(Color.White),
            TextColor: EvaluateOnce(Color.White),
            Reevaluation: HudTextRev.VisibleToStringAndColor,
            Spectators: Spectators.DefaultVisibility
        );
    }
}

# - Limits the maximum health of a player
# - Intended to be used in player rules only
void SetLimitedMaxHealth() "Set Limited Max Health" {
    Number ScaledHealthPercentage: (MaxHealthLimit / MaxHealth(EventPlayer()));
    Number ScaledHealth: RoundToInteger(MaxHealthOfType(EventPlayer(), HealthType.Health) * ScaledHealthPercentage, Rounding.Nearest);
    Number ScaledArmor: RoundToInteger(MaxHealthOfType(EventPlayer(), HealthType.Armor) * ScaledHealthPercentage, Rounding.Nearest);
    Number ScaledShields: RoundToInteger(MaxHealthOfType(EventPlayer(), HealthType.Shields) * ScaledHealthPercentage, Rounding.Nearest);

    CustomHealthHandler.SendCustomHealthRequest(EventPlayer(), ScaledHealth, ScaledShields, ScaledArmor);
}

Number MaxHealthLimit: 350;
Boolean HeroChanged: EventPlayer().Hero() != EvaluateOnce(EventPlayer().Hero());
Boolean IsDva: EventPlayer().Hero() == Hero.Dva;
Boolean ChangedForm: (EventPlayer().MaxHealth() != EvaluateOnce(EventPlayer().MaxHealth()) || EventPlayer().MaxHealth() > MaxHealthLimit);
rule: 'Player Setup' Event.OngoingPlayer Team.Team1
if (HeroChanged)
if (HasSpawned(EventPlayer()))
if (IsAlive())
{
    Boolean ResetRequestDone: IsTrueForAll(CustomHealthReseter.Tasks, !ArrayContains(ArrayElement(), EventPlayer()));
    
    CustomHealthReseter.SendHealthResetRequest(EventPlayer());
    Wait(0.016);
    WaitUntil(ResetRequestDone, 9999);

    DisableGameModeHud();

    # Limit Tank Health
    if (EventPlayer().MaxHealth() > MaxHealthLimit) {
        SetLimitedMaxHealth();
    }
}

rule: 'Dva Setup' Event.OngoingPlayer Team.Team1 Player.Dva
{
    WaitUntil(IsInAlternateForm(EventPlayer()) == true, 9999);

    CustomHealthReseter.SendHealthResetRequest(EventPlayer()); 

    WaitUntil(IsInAlternateForm(EventPlayer()) == false, 9999);
    
    Boolean ResetRequestDone: IsTrueForAll(CustomHealthReseter.Tasks, !ArrayContains(ArrayElement(), EventPlayer()));
    WaitUntil(ResetRequestDone, 9999);
    
    SetLimitedMaxHealth();

    Loop();
}

rule: 'Load Global Hud Elements'
{
    TimerHud.CreateHUD();
    ObjectiveHud.CreateHUD();
}

rule: 'TimerHud Main Method'
{
    TimerHud.main();
}